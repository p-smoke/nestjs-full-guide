var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllPostsArgsDto.html",[0,0.059,1,1.858]],["body/classes/AllPostsArgsDto.html",[0,0.079,1,2.469,2,1.429,3,0.379,4,0.379,5,0.326,6,4.367,7,2.92,8,2.387,9,0.557,10,1.962,11,1.856,12,3.216,13,3.216,14,3.216,15,3.216,16,1.231,17,0.039,18,2.275,19,3.556,20,1.231,21,2.9,22,2.9,23,2.413,24,2.9,25,2.9,26,2.9,27,0.379,28,4.55,29,1.596,30,0.379,31,0.026,32,0.026]],["title/modules/AppModule.html",[33,0.98,34,1.858]],["body/modules/AppModule.html",[0,0.06,3,0.396,4,0.396,5,0.34,17,0.039,27,0.703,30,0.396,31,0.027,32,0.027,33,1.339,34,3.61,35,1.209,36,1.639,37,2.49,38,2.49,39,2.957,40,2.957,41,2.957,42,2.957,43,2.019,44,1.49,45,1.49,46,3.024,47,3.375,48,0.65,49,3.024,50,1.875,51,3.024,52,3.024,53,3.024,54,3.024,55,3.024,56,3.024,57,2.138]],["title/controllers/AuthController.html",[58,1.329,59,1.858]],["body/controllers/AuthController.html",[0,0.059,3,0.393,4,0.393,5,0.338,9,0.576,11,1.332,16,0.978,17,0.039,18,1.807,20,0.978,27,0.606,30,0.393,31,0.026,32,0.026,48,0.645,58,1.33,59,2.528,60,1.33,61,2.47,62,2.47,63,3.001,64,1.63,65,3.357,66,3.357,67,2.47,68,2.448,69,3.001,70,3.001,71,1.63,72,1.63,73,4.091,74,1.63,75,2.47,76,2.448,77,4.077,78,3.001,79,2.47,80,3.001,81,3.001,82,2.121,83,2.282,84,2.47,85,2.47,86,3.001,87,1.652,88,3.001,89,1.63,90,3.001,91,3.001,92,3.001,93,3.001,94,3.001]],["title/modules/AuthModule.html",[33,0.98,39,1.65]],["body/modules/AuthModule.html",[0,0.065,3,0.431,4,0.431,5,0.371,17,0.039,27,0.701,30,0.431,31,0.028,32,0.028,33,1.418,35,1.317,36,1.735,39,3.136,43,2.138,44,1.623,45,1.623,47,2.712,48,0.708,59,3.009,60,1.923,83,2.712,84,2.712,95,2.712,96,2.712,97,3.03,98,3.294,99,2.69,100,3.294,101,2.328,102,3.294,103,3.294,104,3.294]],["title/injectables/AuthService.html",[83,1.477,105,0.885]],["body/injectables/AuthService.html",[0,0.031,3,0.207,4,0.207,5,0.178,9,0.303,11,1.183,16,0.868,17,0.04,20,0.868,23,1.559,27,0.581,30,0.207,31,0.016,32,0.016,48,0.34,50,0.979,64,1.012,65,2.083,66,2.083,67,2.083,68,1.783,71,1.447,72,1.447,73,2.083,74,1.266,75,2.083,76,1.783,83,1.246,85,1.3,89,1.266,101,1.116,105,0.747,106,0.778,107,1.3,108,2.109,109,2.53,110,1.393,111,1.579,112,1.308,113,2.237,114,3.619,115,2.606,116,2.98,117,1.579,118,1.393,119,1.579,120,1.568,121,2.53,122,2.344,123,1.403,124,1.579,125,2.53,126,1.568,127,1.579,128,1.3,129,1.3,130,1.579,131,1.3,132,2.083,133,1.3,134,2.606,135,1.579,136,2.558,137,3.165,138,2.457,139,2.444,140,1.579,141,1.579,142,2.558,143,3.261,144,1.579,145,1.3,146,1.579,147,0.869,148,1.962,149,1.579,150,2.53,151,1.116,152,1.579,153,3.619,154,2.53,155,3.619,156,3.619,157,1.393,158,2.53,159,2.53,160,1.3,161,2.606,162,1.3,163,1.3,164,1.3,165,3.479,166,3.165,167,1.579,168,1.579,169,1.3,170,1.579,171,2.53,172,3.165,173,1.579,174,2.53,175,1.579,176,1.579,177,1.3,178,1.3,179,3.165,180,1.579,181,2.53,182,1.579,183,1.579,184,1.579]],["title/classes/AuthSignInDto.html",[0,0.059,68,1.477]],["body/classes/AuthSignInDto.html",[0,0.096,2,1.616,3,0.429,4,0.429,5,0.369,9,0.63,10,2.132,16,1.038,17,0.038,18,1.918,19,2.683,20,1.038,27,0.429,29,1.805,30,0.566,31,0.028,32,0.028,68,2.132,76,1.616,122,2.537,123,2.522,136,3.64,148,2.033,151,2.318,185,2.318,186,2.7,187,3.28,188,2.318,189,3.28,190,3.423,191,3.887,192,3.784]],["title/classes/AuthSignUpDto.html",[0,0.059,76,1.477]],["body/classes/AuthSignUpDto.html",[0,0.092,2,1.478,3,0.393,4,0.393,5,0.338,9,0.576,10,2.009,11,1.332,16,1.192,17,0.038,18,2.202,19,2.528,20,1.192,27,0.393,29,1.652,30,0.533,31,0.026,32,0.026,68,1.478,76,2.009,122,2.448,123,2.534,136,3.512,148,2.871,151,3.274,185,2.121,186,2.47,188,2.882,190,3.274,191,3.788,192,3.673,193,3.001,194,3.001,195,3.001,196,3.001,197,3.001]],["title/classes/CreatePostDto.html",[0,0.059,198,1.858]],["body/classes/CreatePostDto.html",[0,0.09,2,1.749,3,0.464,4,0.464,5,0.4,9,0.682,10,2.245,16,1.093,17,0.038,18,2.019,19,2.2,20,1.093,27,0.464,29,1.954,30,0.464,31,0.029,32,0.029,123,2.353,188,3.22,190,2.509,191,3.557,192,3.557,198,2.824,199,4.142,200,2.922,201,3.557,202,3.119,203,3.55,204,3.55]],["title/classes/JwtGuard.html",[0,0.059,205,1.477]],["body/classes/JwtGuard.html",[0,0.081,2,2.006,3,0.532,4,0.532,5,0.458,17,0.038,20,0.976,27,0.532,30,0.532,31,0.032,32,0.032,110,2.948,205,2.446,206,3.351,207,4.071,208,4.071,209,2.877,210,2.877,211,4.071,212,3.351]],["title/injectables/JwtStrategy.html",[97,1.65,105,0.885]],["body/injectables/JwtStrategy.html",[0,0.053,3,0.352,4,0.352,5,0.303,9,0.516,11,1.235,16,1.137,17,0.039,20,0.906,23,1.325,27,0.653,30,0.352,31,0.024,32,0.024,48,0.578,50,1.667,64,1.511,71,1.511,72,1.511,74,1.075,89,1.075,97,2.081,105,1.116,106,1.325,108,1.937,110,1.48,112,1.713,113,2.672,115,2.214,116,3.903,118,2.406,120,1.667,122,1.325,123,1.192,129,2.214,134,2.214,138,1.325,139,1.48,143,2.672,157,1.48,169,2.214,177,2.214,178,2.214,209,1.901,210,1.901,212,2.214,213,2.214,214,3.78,215,3.78,216,2.689,217,3.78,218,2.672,219,2.689,220,2.689,221,2.689,222,2.689,223,2.214,224,2.689,225,2.689,226,2.689,227,2.689,228,2.689,229,2.689,230,3.903,231,2.689,232,2.689,233,2.689,234,2.689]],["title/controllers/PostsController.html",[58,1.329,235,1.858]],["body/controllers/PostsController.html",[0,0.029,1,2.165,3,0.194,4,0.194,5,0.167,7,0.818,9,0.285,11,1.343,16,0.986,17,0.04,18,1.919,20,1.038,23,2.296,27,0.566,30,0.194,31,0.016,32,0.016,48,0.319,57,1.702,58,1.067,60,0.658,64,0.963,71,1.644,72,1.644,74,1.731,79,1.982,82,1.702,87,0.818,89,1.731,108,2.437,122,0.732,123,1.822,126,3.193,138,0.732,139,2.383,147,0.818,157,2.565,198,2.165,201,2.147,202,1.883,205,0.732,230,1.223,235,1.493,236,1.223,237,3.037,238,1.982,239,2.408,240,3.037,241,2.408,242,3.493,243,2.408,244,1.485,245,3.493,246,1.485,247,1.485,248,3.037,249,1.485,250,1.485,251,1.485,252,1.485,253,1.485,254,1.702,255,1.485,256,2.408,257,2.408,258,1.485,259,3.493,260,1.485,261,2.408,262,1.485,263,2.408,264,1.485,265,1.485,266,1.485,267,1.485,268,1.223,269,1.485,270,2.876,271,1.485,272,1.05,273,1.485,274,0.818,275,1.05,276,1.05,277,1.485,278,1.05,279,1.485,280,1.485,281,1.485,282,1.485,283,1.186,284,1.223,285,1.223,286,1.485,287,1.485,288,1.485,289,1.485,290,2.408,291,2.408,292,1.485,293,1.485,294,2.5,295,1.485,296,2.408,297,2.147,298,1.485,299,1.485,300,1.485,301,1.223,302,1.485,303,1.485,304,1.485,305,1.485,306,1.485,307,1.485,308,1.485]],["title/modules/PostsModule.html",[33,0.98,40,1.65]],["body/modules/PostsModule.html",[0,0.068,3,0.448,4,0.448,5,0.386,17,0.038,27,0.647,30,0.448,31,0.029,32,0.029,33,1.455,35,1.369,36,1.78,40,3.119,43,2.193,44,1.687,45,1.687,48,0.737,60,1.973,99,2.759,235,3.066,283,2.924,284,2.819,309,2.819,310,2.819,311,2.819,312,3.424,313,3.147,314,3.424]],["title/injectables/PostsService.html",[105,0.885,283,1.477]],["body/injectables/PostsService.html",[0,0.035,3,0.231,4,0.231,5,0.199,7,1.524,9,0.34,11,1.451,12,1.251,13,1.251,14,2.727,15,2.727,16,1.113,17,0.04,20,1.065,27,0.505,30,0.231,31,0.018,32,0.018,48,0.381,64,1.107,71,1.775,72,1.775,74,1.674,82,3.28,87,0.974,89,1.674,105,0.818,106,0.872,108,2.403,110,0.974,112,1.605,118,0.974,126,3.13,128,1.457,132,2.279,133,1.457,138,1.364,139,2.305,142,1.251,145,1.457,147,2.305,160,1.457,161,2.808,162,1.457,163,1.457,164,1.457,165,2.279,202,1.097,218,1.957,238,2.279,254,2.727,274,0.974,283,1.364,315,1.457,316,2.769,317,2.769,318,1.457,319,1.77,320,2.769,321,3.411,322,1.77,323,2.769,324,4.64,325,1.77,326,1.77,327,1.77,328,3.411,329,2.769,330,1.77,331,2.769,332,1.77,333,2.769,334,1.457,335,3.411,336,3.858,337,2.279,338,1.77,339,1.77,340,1.77,341,1.77,342,1.77,343,1.77,344,1.77,345,1.77,346,1.77,347,1.77,348,1.77,349,1.77]],["title/modules/PrismaModule.html",[33,0.98,41,1.65]],["body/modules/PrismaModule.html",[0,0.07,3,0.462,4,0.462,5,0.398,17,0.038,27,0.594,30,0.462,31,0.029,32,0.029,33,1.484,35,1.413,36,1.816,41,3.142,43,2.238,44,1.741,45,1.741,48,0.76,99,2.816,112,2.154,313,3.211,350,2.909,351,2.909,352,2.909,353,3.533,354,4.543,355,3.533]],["title/injectables/PrismaService.html",[105,0.885,112,1.083]],["body/injectables/PrismaService.html",[0,0.063,3,0.418,4,0.418,5,0.36,9,0.614,11,1.045,16,0.767,17,0.039,20,1.021,27,0.557,30,0.418,31,0.028,32,0.028,48,0.688,64,1.702,71,1.279,72,1.279,74,1.702,105,1.257,106,1.576,108,2.47,112,1.538,139,2.343,210,3.009,274,1.761,356,2.633,357,4.783,358,4.256,359,5.46,360,4.256,361,5.099,362,3.199,363,2.633,364,3.199,365,3.199,366,3.199,367,3.199,368,3.199]],["title/controllers/UserController.html",[58,1.329,369,1.858]],["body/controllers/UserController.html",[0,0.06,3,0.394,4,0.394,5,0.339,9,0.578,11,0.984,16,0.722,17,0.039,18,1.812,20,0.98,23,2.286,27,0.607,30,0.394,31,0.026,32,0.026,48,0.648,58,1.335,60,1.335,62,2.48,64,1.635,71,1.205,72,1.205,74,1.635,87,1.658,89,1.635,108,2.378,120,2.534,157,2.555,205,1.484,268,2.48,270,3.366,272,2.129,278,2.129,285,2.48,294,2.48,297,2.129,369,2.534,370,2.48,371,2.48,372,3.366,373,4.977,374,3.012,375,4.088,376,3.012,377,3.012,378,2.286,379,2.48,380,3.012,381,3.012,382,3.012,383,3.012]],["title/modules/UserModule.html",[33,0.98,42,1.65]],["body/modules/UserModule.html",[0,0.068,3,0.448,4,0.448,5,0.386,17,0.038,27,0.647,30,0.448,31,0.029,32,0.029,33,1.455,35,1.369,36,1.78,42,3.119,43,2.193,44,1.687,45,1.687,48,0.737,60,1.973,99,2.759,313,3.147,369,3.066,378,2.924,379,2.819,384,2.819,385,2.819,386,2.819,387,3.424,388,3.424]],["title/injectables/UserService.html",[105,0.885,378,1.477]],["body/injectables/UserService.html",[0,0.035,3,0.234,4,0.234,5,0.201,7,0.983,9,0.343,11,1.456,12,2.425,13,2.425,14,2.425,15,2.425,16,1.257,17,0.04,20,1.069,23,1.69,27,0.507,30,0.234,31,0.018,32,0.018,48,0.384,57,3.405,64,1.115,71,1.782,72,1.782,74,1.682,87,0.983,89,1.682,105,0.823,106,0.88,108,2.407,110,0.983,112,1.611,118,0.983,120,1.729,122,0.88,126,2.763,138,1.69,143,2.74,147,1.889,148,1.729,157,2.563,201,1.262,202,1.107,205,0.88,218,3.15,254,3.15,272,1.262,274,0.983,278,1.262,297,1.262,318,1.47,334,1.47,371,2.296,372,2.296,378,1.374,389,1.47,390,2.789,391,2.789,392,1.786,393,2.789,394,4.817,395,1.786,396,2.789,397,1.786,398,2.789,399,1.786,400,1.786,401,1.786,402,3.431,403,2.789,404,1.786,405,2.789,406,3.431,407,1.786,408,1.786,409,1.786,410,1.786,411,1.786,412,1.786]],["title/coverage.html",[413,2.88]],["body/coverage.html",[0,0.102,1,1.798,5,0.326,6,2.387,7,1.596,8,2.387,16,0.695,17,0.038,31,0.026,32,0.026,58,2.016,59,1.798,61,2.387,68,1.429,76,1.429,83,1.429,97,1.596,105,1.516,107,2.387,112,1.048,142,2.05,185,2.816,198,1.798,199,2.387,200,2.387,205,1.429,206,2.387,213,2.387,235,1.798,236,2.387,275,2.05,276,2.05,283,1.429,315,2.387,356,2.387,369,1.798,370,2.387,378,1.429,389,2.387,413,2.05,414,2.9,415,2.9,416,2.9,417,5.89,418,5.304,419,3.983,420,2.387,421,2.9,422,3.983,423,2.9,424,2.387,425,2.9,426,2.387,427,2.9,428,2.9,429,3.983,430,2.9,431,2.9]],["title/dependencies.html",[36,1.44,432,2.068]],["body/dependencies.html",[0,0.09,17,0.039,29,1.945,31,0.029,32,0.029,36,1.413,48,0.76,50,2.19,101,2.498,113,2.498,131,2.909,209,2.498,223,3.74,274,1.945,433,5.482,434,3.533,435,3.533,436,3.533,437,3.533,438,3.533,439,3.533,440,3.533,441,3.533,442,3.533,443,3.533,444,3.533,445,3.533,446,3.533,447,3.533,448,3.533,449,3.533,450,3.533,451,3.533,452,3.533,453,3.533]],["title/miscellaneous/functions.html",[454,1.557,455,2.965]],["body/miscellaneous/functions.html",[9,0.863,17,0.034,31,0.034,32,0.034,424,3.701,426,4.599,454,2.786,455,3.701,456,4.495]],["title/index.html",[9,0.482,457,2.512,458,2.512]],["body/index.html",[17,0.039,31,0.03,32,0.03,118,1.972,363,2.949,413,2.532,459,3.582,460,3.582,461,3.582,462,3.582,463,5.725,464,3.582,465,3.582,466,5.631,467,3.582,468,3.582,469,4.583,470,3.582,471,3.582,472,3.582,473,3.582,474,4.583,475,4.583,476,3.582,477,3.582,478,3.582]],["title/modules.html",[35,1.629]],["body/modules.html",[17,0.032,31,0.032,32,0.032,34,2.523,35,1.628,39,2.241,40,2.241,41,2.241,42,2.241,479,5.716,480,5.716,481,5.716,482,5.716]],["title/overview.html",[483,3.355]],["body/overview.html",[2,1.434,17,0.038,31,0.026,32,0.026,34,3.524,35,1.164,36,1.597,37,2.396,38,2.396,39,2.994,40,2.923,41,2.923,42,2.923,43,1.968,44,1.434,45,1.434,60,1.29,83,2.246,95,2.396,96,2.396,97,2.51,106,1.434,112,1.965,283,2.679,309,2.396,310,2.396,311,2.396,350,2.396,351,2.396,352,2.396,378,2.679,384,2.396,385,2.396,386,2.396,483,2.396,484,4.559,485,2.911]],["title/properties.html",[10,1.774,432,2.068]],["body/properties.html",[10,2.177,17,0.038,31,0.034,32,0.034,301,3.637,486,4.418,487,4.418,488,4.418,489,4.418,490,4.418]],["title/miscellaneous/variables.html",[454,1.557,491,2.965]],["body/miscellaneous/variables.html",[9,0.746,17,0.039,31,0.031,32,0.031,89,1.929,123,1.723,138,1.915,147,2.656,275,3.411,276,2.748,337,3.2,420,3.972,454,2.41,491,3.2,492,3.887,493,3.887,494,3.887,495,3.887,496,3.887,497,3.887,498,3.887,499,3.887,500,3.887,501,3.887,502,3.887]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":487,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["0.29.1",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["15m",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.2.0",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":485,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":484,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["allpostsargsdto",{"_index":1,"title":{"classes/AllPostsArgsDto.html":{}},"body":{"classes/AllPostsArgsDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["api",{"_index":460,"title":{},"body":{"index.html":{}}}],["app",{"_index":363,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":368,"title":{},"body":{"injectables/PrismaService.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(dto.password",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify(user.password",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["args.dto",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["args.dto.ts",{"_index":8,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"coverage.html":{}}}],["args.dto.ts:10",{"_index":25,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["args.dto.ts:13",{"_index":21,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["args.dto.ts:16",{"_index":26,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["args.dto.ts:19",{"_index":22,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["args.dto.ts:6",{"_index":24,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["async",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":59,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":208,"title":{},"body":{"classes/JwtGuard.html":{}}}],["authguard('jwt",{"_index":211,"title":{},"body":{"classes/JwtGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"properties.html":{}}}],["authoremail",{"_index":248,"title":{},"body":{"controllers/PostsController.html":{}}}],["authservice",{"_index":83,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authsignindto",{"_index":68,"title":{"classes/AuthSignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"coverage.html":{}}}],["authsignupdto",{"_index":76,"title":{"classes/AuthSignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"coverage.html":{}}}],["await",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{}}}],["badrequestexception",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["body",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["bootstrap",{"_index":426,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":482,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":479,"title":{},"body":{"modules.html":{}}}],["catch",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["class",{"_index":0,"title":{"classes/AllPostsArgsDto.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{}},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":309,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":310,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":311,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":350,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":351,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":352,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":384,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":386,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":385,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["compare",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["config.get('jwt_secret",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["connect",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log",{"_index":339,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(params",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":344,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(prisma",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prismaservice",{"_index":318,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["contains",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":58,"title":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":380,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":413,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdraft",{"_index":237,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdraft(authoremail",{"_index":244,"title":{},"body":{"controllers/PostsController.html":{}}}],["createparamdecorator",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":316,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(data",{"_index":320,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":198,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["ctx",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cursor",{"_index":12,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["data",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":18,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"controllers/AuthController.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{}}}],["delete('posts/:id",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost",{"_index":238,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('id",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":249,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(where",{"_index":323,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteuser",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":488,"title":{},"body":{"properties.html":{}}}],["development",{"_index":465,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto.email",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.fullname",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.username",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/all",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/auth.dto",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["e2e",{"_index":476,"title":{},"body":{"index.html":{}}}],["email",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["enableshutdownhooks",{"_index":358,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":360,"title":{},"body":{"injectables/PrismaService.html":{}}}],["error",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["error.code",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["exception",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":30,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":313,"title":{},"body":{"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["express.request",{"_index":499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":210,"title":{},"body":{"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":345,"title":{},"body":{"injectables/PostsService.html":{}}}],["fields",{"_index":346,"title":{},"body":{"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["forbiddenexception('credentials",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["fullname",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{}}}],["function",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":455,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id/posts",{"_index":375,"title":{},"body":{"controllers/UserController.html":{}}}],["get('filtered",{"_index":256,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('posts",{"_index":263,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('posts/:id",{"_index":261,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":239,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(@query",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(params",{"_index":252,"title":{},"body":{"controllers/PostsController.html":{}}}],["getfilteredposts",{"_index":240,"title":{},"body":{"controllers/PostsController.html":{}}}],["getfilteredposts(searchstring",{"_index":255,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid",{"_index":241,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(@param('id",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":260,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpublishedposts",{"_index":242,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":457,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":275,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser('email",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["getuserposts",{"_index":372,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserposts(@param('id",{"_index":382,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserposts(id",{"_index":374,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserposts(params",{"_index":396,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":373,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":354,"title":{},"body":{"modules/PrismaModule.html":{}}}],["hash",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('signin",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":365,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["incorrect",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllPostsArgsDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":361,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":105,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":462,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":464,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["isemail",{"_index":190,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{}}}],["isemail()@isnotempty",{"_index":186,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{}}}],["isglobal",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":28,"title":{},"body":{"classes/AllPostsArgsDto.html":{}}}],["isnotempty",{"_index":191,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":19,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{}}}],["isstring",{"_index":192,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":188,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{}}}],["isstring()@isoptional",{"_index":194,"title":{},"body":{"classes/AuthSignUpDto.html":{}}}],["jwt",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":205,"title":{"classes/JwtGuard.html":{}},"body":{"classes/JwtGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":97,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["license",{"_index":489,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":454,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":469,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nestjs",{"_index":459,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":209,"title":{},"body":{"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["npm",{"_index":463,"title":{},"body":{"index.html":{}}}],["number",{"_index":23,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["onmoduleinit",{"_index":359,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":11,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignUpDto.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby",{"_index":13,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":483,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["package",{"_index":432,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":268,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('searchstring",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":254,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["parseint(skip",{"_index":338,"title":{},"body":{"injectables/PostsService.html":{}}}],["parseint(take",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{}}}],["parseintpipe",{"_index":270,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{}}}],["payload",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["post",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post('posts",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('signin",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(postwhereuniqueinput",{"_index":326,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postdata",{"_index":245,"title":{},"body":{"controllers/PostsController.html":{}}}],["postgresql",{"_index":461,"title":{},"body":{"index.html":{}}}],["postmodel",{"_index":273,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts",{"_index":7,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["posts(params",{"_index":329,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts.controller",{"_index":314,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/:searchstring",{"_index":257,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":235,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":40,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":283,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postwhereuniqueinput",{"_index":328,"title":{},"body":{"injectables/PostsService.html":{}}}],["prefix",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["prisma.postcreateinput",{"_index":321,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.postupdateinput",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":324,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.service",{"_index":355,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":408,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":410,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":274,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["prisma/prisma.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["prismaclient",{"_index":357,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["prismamodule",{"_index":41,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":112,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":471,"title":{},"body":{"index.html":{}}}],["promise",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AllPostsArgsDto.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"properties.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["published",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost",{"_index":243,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(@param('id",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(id",{"_index":265,"title":{},"body":{"controllers/PostsController.html":{}}}],["put",{"_index":269,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('publish/:id",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["pwmatches",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["query",{"_index":271,"title":{},"body":{"controllers/PostsController.html":{}}}],["readonly",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["request",{"_index":498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":31,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":466,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["searchstring",{"_index":259,"title":{},"body":{"controllers/PostsController.html":{}}}],["secret",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":406,"title":{},"body":{"injectables/UserService.html":{}}}],["signin",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(dto",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signtoken",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["signtoken(userid",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["skip",{"_index":14,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../get",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":456,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:10",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:72",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorator/get",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":185,"title":{},"body":{"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":196,"title":{},"body":{"classes/AuthSignUpDto.html":{}}}],["src/auth/dto/auth.dto.ts:14",{"_index":197,"title":{},"body":{"classes/AuthSignUpDto.html":{}}}],["src/auth/dto/auth.dto.ts:18",{"_index":195,"title":{},"body":{"classes/AuthSignUpDto.html":{}}}],["src/auth/dto/auth.dto.ts:24",{"_index":187,"title":{},"body":{"classes/AuthSignInDto.html":{}}}],["src/auth/dto/auth.dto.ts:28",{"_index":189,"title":{},"body":{"classes/AuthSignInDto.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":193,"title":{},"body":{"classes/AuthSignUpDto.html":{}}}],["src/auth/guard/jwt.guard",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/auth/guard/jwt.guard.ts",{"_index":206,"title":{},"body":{"classes/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt.guard.ts:3",{"_index":207,"title":{},"body":{"classes/JwtGuard.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:16",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:8",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/main.ts",{"_index":424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/all",{"_index":6,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts",{"_index":236,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":253,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:31",{"_index":264,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:38",{"_index":262,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:43",{"_index":258,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":247,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:78",{"_index":267,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:87",{"_index":251,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":312,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":315,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":319,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:14",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:25",{"_index":327,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":322,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:53",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:64",{"_index":325,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":353,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":334,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":356,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":362,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":364,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user/user.controller.ts",{"_index":370,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:17",{"_index":377,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:22",{"_index":376,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":387,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":389,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:38",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:60",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:71",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":467,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":470,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":472,"title":{},"body":{"index.html":{}}}],["started",{"_index":458,"title":{"index.html":{}},"body":{}}],["statements",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["super",{"_index":212,"title":{},"body":{"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":480,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":481,"title":{},"body":{"modules.html":{}}}],["table",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":15,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["taken",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":475,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":478,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":477,"title":{},"body":{"index.html":{}}}],["tests",{"_index":474,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":366,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":367,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.signin(dto",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('jwt_secret",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postservice.createpost",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.deletepost",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.post",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.posts",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.posts(params",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.updatepost",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prisma.user.create",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.prismaservice.post.create",{"_index":342,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":340,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":341,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.delete",{"_index":412,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.user.findmany",{"_index":409,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.user.findunique",{"_index":405,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.user.update",{"_index":411,"title":{},"body":{"injectables/UserService.html":{}}}],["this.signtoken(user.id",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserposts",{"_index":383,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.users",{"_index":381,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["title",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["token",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["try",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["types",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":343,"title":{},"body":{"injectables/PostsService.html":{}}}],["unit",{"_index":473,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":490,"title":{},"body":{"properties.html":{}}}],["updatepost",{"_index":317,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(params",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{}}}],["updateuser",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":398,"title":{},"body":{"injectables/UserService.html":{}}}],["useguards",{"_index":272,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["useguards(jwtguard",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["useguards(jwtguard)@delete('posts/:id",{"_index":250,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(jwtguard)@post('posts",{"_index":246,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(jwtguard)@put('publish/:id",{"_index":266,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["user(userwhereuniqueinput",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":388,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdat",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.decorator",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.fullname",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.id",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.service",{"_index":379,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.updatedat",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.username",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":369,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"injectables/UserService.html":{}}}],["users",{"_index":371,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users(params",{"_index":403,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":378,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":402,"title":{},"body":{"injectables/UserService.html":{}}}],["validate",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":29,"title":{},"body":{"classes/AllPostsArgsDto.html":{},"classes/AuthSignInDto.html":{},"classes/AuthSignUpDto.html":{},"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":491,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":486,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":468,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllPostsArgsDto.html":{"url":"classes/AllPostsArgsDto.html","title":"class - AllPostsArgsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllPostsArgsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/all-posts-args.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cursor\n                            \n                            \n                                    Optional\n                                orderBy\n                            \n                            \n                                    Optional\n                                skip\n                            \n                            \n                                    Optional\n                                take\n                            \n                            \n                                    Optional\n                                where\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cursor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/all-posts-args.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/all-posts-args.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/all-posts-args.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/all-posts-args.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        where\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/all-posts-args.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\n\nexport class AllPostsArgsDto {\n  // @IsInt()\n  @IsOptional()\n  skip?: number;\n\n  // @IsInt()\n  @IsOptional()\n  take?: number;\n\n  @IsOptional()\n  cursor?: any;\n\n  @IsOptional()\n  where?: any;\n\n  @IsOptional()\n  orderBy?: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from './user/user.module';\nimport { PostsModule } from './posts/posts.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    UserModule,\n    PostsModule,\n    PrismaModule,\n    AuthModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signin\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        signin\n                        \n                    \n                \n            \n            \n                \nsignin(dto: AuthSignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthSignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(dto: AuthSignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthSignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthSignUpDto, AuthSignInDto } from './dto/auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('signup')\n  signup(@Body() dto: AuthSignUpDto) {\n    return this.authService.signup(dto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('signin')\n  signin(@Body() dto: AuthSignInDto) {\n    return this.authService.signin(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategy/jwt.strategy';\n\n@Module({\n  imports: [JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(dto: AuthSignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthSignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signToken(userId: number, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(dto: AuthSignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthSignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { AuthSignUpDto, AuthSignInDto } from './dto/auth.dto';\nimport * as argon from 'argon2';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwt: JwtService,\n    private config: ConfigService,\n  ) {}\n\n  async signup(dto: AuthSignUpDto) {\n    // generate the password hash\n    const hash = await argon.hash(dto.password);\n    // save the new user in the db\n    try {\n      const user = await this.prisma.user.create({\n        data: {\n          username: dto.username,\n          email: dto.email,\n          password: hash,\n          fullName: dto.fullName,\n        },\n      });\n\n      const access_token = await this.signToken(user.id, user.email);\n\n      const response = {\n        user: { id: user.id, username: user.username, email: user.email },\n        access_token,\n      };\n\n      return response;\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('Credentials taken');\n        }\n      }\n      throw error;\n    }\n  }\n\n  async signin(dto: AuthSignInDto) {\n    // find the user by email\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    // if user does not exist throw exception\n    if (!user) throw new ForbiddenException('Credentials incorrect');\n\n    // compare password\n    const pwMatches = await argon.verify(user.password, dto.password);\n    // if password incorrect throw exception\n    if (!pwMatches) throw new ForbiddenException('Credentials incorrect');\n    const access_token = await this.signToken(user.id, user.email);\n\n    const response = {\n      user: { id: user.id, username: user.username, email: user.email },\n      access_token,\n    };\n    return response;\n  }\n\n  async signToken(userId: number, email: string): Promise {\n    const payload = {\n      sub: userId,\n      email,\n    };\n    const secret = this.config.get('JWT_SECRET');\n\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '15m',\n      secret: secret,\n    });\n\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthSignInDto.html":{"url":"classes/AuthSignInDto.html","title":"class - AuthSignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthSignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsOptional } from 'class-validator';\n\nexport class AuthSignUpDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsOptional()\n  fullName?: string;\n}\n\nexport class AuthSignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthSignUpDto.html":{"url":"classes/AuthSignUpDto.html","title":"class - AuthSignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthSignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                fullName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsOptional } from 'class-validator';\n\nexport class AuthSignUpDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsOptional()\n  fullName?: string;\n}\n\nexport class AuthSignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtGuard.html":{"url":"classes/JwtGuard.html","title":"class - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class JwtGuard extends AuthGuard('jwt') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from '../../prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(config: ConfigService, private prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: number; email: string }) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n    delete user.password;\n    delete user.createdAt;\n    delete user.updatedAt;\n    delete user.fullName;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDraft\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    Async\n                                publishPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDraft(authorEmail: string, postData: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('posts')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postData\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Delete('posts/:id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(params: AllPostsArgsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                AllPostsArgsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFilteredPosts(searchString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filtered-posts/:searchString')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchString\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('posts/:id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('posts')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    publishPost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Put('publish/:id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { Post as PostModel } from '@prisma/client';\nimport { GetUser } from 'src/auth/decorator/get-user.decorator';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { AllPostsArgsDto } from './dto/all-posts-args.dto';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PostsService } from './posts.service';\n\n@Controller()\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  @Get('')\n  async getAllPosts(@Query() params: AllPostsArgsDto): Promise {\n    console.log(params);\n    return await this.postService.posts(params);\n  }\n\n  @Get('posts')\n  async getPublishedPosts(): Promise {\n    return await this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('posts/:id')\n  async getPostById(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.postService.post({ id: Number(id) });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise {\n    return await this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @UseGuards(JwtGuard)\n  @Post('posts')\n  async createDraft(\n    @GetUser('email') authorEmail: string,\n    @Body() postData: CreatePostDto,\n  ): Promise {\n    const { title, content } = postData;\n    return await this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @UseGuards(JwtGuard)\n  @Put('publish/:id')\n  async publishPost(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @UseGuards(JwtGuard)\n  @Delete('posts/:id')\n  async deletePost(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.postService.deletePost({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService \n\nPostsService \n\n\n\nPostsModule\n\nPostsModule\n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                posts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(data: Prisma.PostCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.PostCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.PostWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(postWhereUniqueInput: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postWhereUniqueInput\n                                    \n                                            Prisma.PostWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(params)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n} from '@nestjs/common';\nimport { Post, Prisma } from '@prisma/client';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async posts(params): Promise {\n    let { skip, take } = params;\n    take = parseInt(take, 10) ? parseInt(take, 10) : undefined;\n    skip = parseInt(skip, 10) ? parseInt(take, 10) : undefined;\n    // console.log({ skip, take, cursor, where, orderBy });\n    return await this.prismaService.post.findMany({\n      skip,\n      take,\n    });\n  }\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise {\n    return await this.prismaService.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise {\n    try {\n      const post = await this.prismaService.post.create({\n        data,\n      });\n      if (post) {\n        return post;\n      }\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new BadRequestException(\n            'Unique constraint failed on the fields: (`title`)',\n          );\n        }\n      }\n      throw error;\n    }\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise {\n    const { data, where } = params;\n    return await this.prismaService.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n    return await this.prismaService.post.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, INestApplication, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserPosts\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserPosts(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/posts')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { UserService } from './user.service';\n\n@UseGuards(JwtGuard)\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  async getUsers() {\n    return this.userService.users({});\n  }\n\n  @Get(':id/posts')\n  async getUserPosts(@Param('id', ParseIntPipe) id: number) {\n    return this.userService.getUserPosts({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserPosts\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserPosts(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                    \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                    \n                    users(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UseGuards } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\n\n@UseGuards(JwtGuard)\n@Injectable()\nexport class UserService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getUserPosts(params: { id: number }) {\n    const { id } = params;\n    return this.prismaService.user.findUnique({\n      where: {\n        id: id,\n      },\n      select: {\n        id: true,\n        username: true,\n        posts: {\n          select: {\n            id: true,\n            title: true,\n            content: true,\n          },\n        },\n      },\n    });\n  }\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prismaService.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }) {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prismaService.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n      select: {\n        id: true,\n        email: true,\n        username: true,\n      },\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prismaService.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prismaService.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/decorator/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthSignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthSignUpDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt.guard.ts\n            \n            class\n            JwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/all-posts-args.dto.ts\n            \n            class\n            AllPostsArgsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.3.1\n        \n            argon2 : ^0.29.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API + Prisma + PostgresQL\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, ctx: ExecutionContext) => {\n    const request: Express.Request = ctx.switchToHttp().getRequest();\n    if (data) {\n      return request.user[data];\n    }\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
